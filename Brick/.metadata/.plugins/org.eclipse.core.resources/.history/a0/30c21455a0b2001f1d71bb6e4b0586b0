package Pages;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import models.Discount;
import models.Product;
import application.DatabaseUtility;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ManageDiscounts {

    private final VBox root;
    private final TableView<Discount> discountsTable;
    private final Stage primaryStage;

    public ManageDiscounts(Stage primaryStage) {
        this.primaryStage = primaryStage;

        // Root Layout
        root = new VBox(20);
        root.setPadding(new Insets(10));
        root.setAlignment(Pos.TOP_CENTER);
        root.setStyle("-fx-background-color: cornflowerblue;");

        // Title
        Label mainLabel = new Label("Manage Discounts");
        mainLabel.setStyle("-fx-font-size: 24px;");

        // Search Bar
        HBox searchBar = new HBox(10);
        TextField searchField = new TextField();
        searchField.setPromptText("Search discounts...");
        Button searchButton = new Button("Search");
        searchBar.getChildren().addAll(searchField, searchButton);

        // Buttons
        VBox buttons = new VBox(20);
        Button viewDiscountsButton = new Button("View Discounts");
        Button createDiscountsButton = new Button("Create Discount");
        Button updateDiscountsButton = new Button("Update Discount");
        Button deleteDiscountsButton = new Button("Delete Discount");
        Button returnToHomePageButton = new Button("Return to Homepage");
        buttons.getChildren().addAll(viewDiscountsButton, createDiscountsButton, updateDiscountsButton, deleteDiscountsButton, returnToHomePageButton);

        // TableView for discounts
        discountsTable = new TableView<>();
        discountsTable.setPrefWidth(800);
        discountsTable.setPlaceholder(new Label("No discounts found."));
        setupTableColumns();

        // Layout
        HBox mainLayout = new HBox(20, new VBox(searchBar, buttons), discountsTable);
        root.getChildren().addAll(mainLabel, mainLayout);

        // Set Button Actions
        setButtonActions(searchField, searchButton, viewDiscountsButton, createDiscountsButton, updateDiscountsButton, deleteDiscountsButton, returnToHomePageButton);
    }

    private void setupTableColumns() {
        TableColumn<Discount, Integer> discountIdColumn = new TableColumn<>("Discount ID");
        discountIdColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleIntegerProperty(data.getValue().getDiscountId()).asObject());

        TableColumn<Discount, String> productNameColumn = new TableColumn<>("Product Name");
        productNameColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().getProductName()));

        TableColumn<Discount, Double> percentageColumn = new TableColumn<>("Discount %");
        percentageColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleDoubleProperty(data.getValue().getDiscountPercentage()).asObject());

        TableColumn<Discount, String> startDateColumn = new TableColumn<>("Start Date");
        startDateColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().getStartDate().toString()));

        TableColumn<Discount, String> endDateColumn = new TableColumn<>("End Date");
        endDateColumn.setCellValueFactory(data -> new javafx.beans.property.SimpleStringProperty(data.getValue().getEndDate().toString()));

        discountsTable.getColumns().addAll(discountIdColumn, productNameColumn, percentageColumn, startDateColumn, endDateColumn);
    }

    private void setButtonActions(TextField searchField, Button searchButton, Button viewDiscountsButton, Button createDiscountsButton, Button updateDiscountsButton, Button deleteDiscountsButton, Button returnToHomePageButton) {
        searchButton.setOnAction(e -> {
            String searchText = searchField.getText();
            if (!searchText.isEmpty()) {
                discountsTable.getItems().clear();
                searchDiscounts(searchText);
            }
        });

        viewDiscountsButton.setOnAction(e -> {
            discountsTable.getItems().clear();
            loadAllDiscounts();
        });

        createDiscountsButton.setOnAction(e -> showCreateDiscountDialog());
        updateDiscountsButton.setOnAction(e -> {
            Discount selectedDiscount = discountsTable.getSelectionModel().getSelectedItem();
            if (selectedDiscount != null) {
                showUpdateDiscountDialog(selectedDiscount);
            } else {
                showAlert("Warning", "Please select a discount to update.");
            }
        });

        deleteDiscountsButton.setOnAction(e -> {
            Discount selectedDiscount = discountsTable.getSelectionModel().getSelectedItem();
            if (selectedDiscount != null) {
                deleteDiscount(selectedDiscount);
            } else {
                showAlert("Warning", "Please select a discount to delete.");
            }
        });

        returnToHomePageButton.setOnAction(e -> primaryStage.setScene(new Scene(new EmployeeHomePage(primaryStage).getRoot(), 800, 800)));
    }

    private void showCreateDiscountDialog() {
        // Similar implementation as previously shared
    }

    private void showUpdateDiscountDialog(Discount discount) {
        // Ensure that `productName` is fetched and properly displayed
        // Allow editing of other fields
    }

    private void createDiscount(String productName, double discountPercentage, Date startDate, Date endDate) {
        String sql = "INSERT INTO Discount (product_id, discount_percentage, start_date, end_date) SELECT product_id, ?, ?, ? FROM Product WHERE product_name = ?";

        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setDouble(1, discountPercentage);
            preparedStatement.setDate(2, startDate);
            preparedStatement.setDate(3, endDate);
            preparedStatement.setString(4, productName);

            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted == 0) {
                showAlert("Error", "Product not found for the provided name: " + productName);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void updateDiscount(int discountId, String productName, double discountPercentage, Date startDate, Date endDate) {
        String sql = "UPDATE Discount SET product_id = (SELECT product_id FROM Product WHERE product_name = ?), discount_percentage = ?, start_date = ?, end_date = ? WHERE discount_id = ?";

        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            preparedStatement.setString(1, productName);
            preparedStatement.setDouble(2, discountPercentage);
            preparedStatement.setDate(3, startDate);
            preparedStatement.setDate(4, endDate);
            preparedStatement.setInt(5, discountId);

            int rowsUpdated = preparedStatement.executeUpdate();
            if (rowsUpdated == 0) {
                showAlert("Error", "Discount update failed. Check if product name is valid.");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void deleteDiscount(Discount discount) {
        String sql = "DELETE FROM Discount WHERE discount_id = ?";

        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            preparedStatement.setInt(1, discount.getDiscountId());
            preparedStatement.executeUpdate();
            discountsTable.getItems().remove(discount);

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void loadAllDiscounts() {
        // Implementation remains the same
    }

    private void searchDiscounts(String searchText) {
        // Implementation remains the same
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.WARNING, message, ButtonType.OK);
        alert.setTitle(title);
        alert.showAndWait();
    }

    public Parent getRoot() {
        return root;
    }
}
