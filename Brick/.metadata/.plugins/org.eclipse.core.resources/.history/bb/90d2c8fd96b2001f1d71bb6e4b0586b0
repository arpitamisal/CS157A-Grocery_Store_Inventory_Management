package Pages;

import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import javafx.stage.Modality;
import models.Inventory;
import application.DatabaseUtility;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class TrackInventory {

    private final VBox root;
    private final VBox buttons;
    private final HBox mainLayout;
    private final VBox leftPane;
    private final Stage primaryStage;
    private final TableView<Inventory> inventoryTable;

    public TrackInventory(Stage primaryStage) {
        this.primaryStage = primaryStage;

        // Root layout
        root = new VBox(20);
        root.setPadding(new Insets(10));
        root.setAlignment(Pos.TOP_CENTER);
        root.setStyle("-fx-background-color: cornflowerblue;");

        // Title Label
        Label mainLabel = new Label("Track Inventory");
        mainLabel.setStyle("-fx-font-size: 24px;");

        // Search Bar
        HBox searchBar = new HBox(10);
        searchBar.setAlignment(Pos.CENTER_LEFT);
        TextField searchField = new TextField();
        searchField.setPromptText("Search inventory...");
        Button searchButton = new Button("Search");
        searchBar.getChildren().addAll(searchField, searchButton);

        // Buttons
        buttons = new VBox(20);
        buttons.setPadding(new Insets(10));
        Button trackStockLevelsButton = new Button("Track Stock Levels");
        Button updateStockQuantityButton = new Button("Update Stock Quantity");
        Button returnToHomePageButton = new Button("Return to Homepage");
        buttons.getChildren().addAll(trackStockLevelsButton, updateStockQuantityButton, returnToHomePageButton);
        buttons.setAlignment(Pos.TOP_LEFT);

        // Left Pane
        leftPane = new VBox(20);
        leftPane.getChildren().addAll(searchBar, buttons);
        leftPane.setAlignment(Pos.TOP_LEFT);

        // TableView
        inventoryTable = new TableView<>();
        inventoryTable.setPrefWidth(600);
        inventoryTable.setPlaceholder(new Label("No inventory data found."));
        setupTableColumns();

        // Main Layout
        mainLayout = new HBox(20, leftPane, inventoryTable);
        mainLayout.setAlignment(Pos.TOP_LEFT);
        mainLayout.setPadding(new Insets(10));

        // Add components to root
        root.getChildren().addAll(mainLabel, mainLayout);

        // Set Button Actions
        setButtonActions(searchField, searchButton, trackStockLevelsButton, updateStockQuantityButton, returnToHomePageButton);
    }

    private void setupTableColumns() {
        TableColumn<Inventory, Integer> inventoryIdColumn = new TableColumn<>("Inventory ID");
        inventoryIdColumn.setCellValueFactory(data -> new SimpleIntegerProperty(data.getValue().getInventoryId()).asObject());
        inventoryIdColumn.setPrefWidth(100);

        TableColumn<Inventory, Integer> productIdColumn = new TableColumn<>("Product ID");
        productIdColumn.setCellValueFactory(data -> new SimpleIntegerProperty(data.getValue().getProductId()).asObject());
        productIdColumn.setPrefWidth(100);

        TableColumn<Inventory, Integer> reorderLevelColumn = new TableColumn<>("Reorder Level");
        reorderLevelColumn.setCellValueFactory(data -> new SimpleIntegerProperty(data.getValue().getReorderLevel()).asObject());
        reorderLevelColumn.setPrefWidth(150);

        inventoryTable.getColumns().addAll(inventoryIdColumn, productIdColumn, reorderLevelColumn);
    }

    private void setButtonActions(TextField searchField, Button searchButton, Button trackStockLevelsButton,
                                   Button updateStockQuantityButton, Button returnToHomePageButton) {

        trackStockLevelsButton.setOnAction(e -> loadInventoryData());

        updateStockQuantityButton.setOnAction(e -> {
            Inventory selectedInventory = inventoryTable.getSelectionModel().getSelectedItem();
            if (selectedInventory != null) {
                showEditInventoryDialog(selectedInventory);
            } else {
                Alert alert = new Alert(Alert.AlertType.WARNING, "Please select an inventory item to update.", ButtonType.OK);
                alert.showAndWait();
            }
        });

        returnToHomePageButton.setOnAction(e -> {
            EmployeeHomePage empHomePage = new EmployeeHomePage(primaryStage);
            primaryStage.setScene(new Scene(empHomePage.getRoot(), 600, 600));
            primaryStage.setTitle("Homepage");
        });

        searchButton.setOnAction(e -> {
            String searchText = searchField.getText();
            if (!searchText.isEmpty()) {
                inventoryTable.getItems().clear();
                searchInventoryData(searchText);
            } else {
                Alert alert = new Alert(Alert.AlertType.WARNING, "Please enter a search term.", ButtonType.OK);
                alert.showAndWait();
            }
        });
    }

    private void loadInventoryData() {
        inventoryTable.getItems().clear();
        String sql = "SELECT * FROM Inventory";

        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql);
             ResultSet resultSet = statement.executeQuery()) {

            while (resultSet.next()) {
                Inventory inventory = new Inventory(
                        resultSet.getInt("inventory_id"),
                        resultSet.getInt("product_id"),
                        resultSet.getInt("is_reorder_needed")
                );
                inventoryTable.getItems().add(inventory);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void searchInventoryData(String searchText) {
        String sql = "SELECT * FROM Inventory WHERE product_id LIKE ?";

        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setString(1, "%" + searchText + "%");
            ResultSet resultSet = statement.executeQuery();

            while (resultSet.next()) {
                Inventory inventory = new Inventory(
                        resultSet.getInt("inventory_id"),
                        resultSet.getInt("product_id"),
                        resultSet.getInt("is_reorder_needed")
                );
                inventoryTable.getItems().add(inventory);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void showEditInventoryDialog(Inventory inventory) {
        Stage dialog = new Stage();
        dialog.initModality(Modality.APPLICATION_MODAL);
        dialog.setTitle("Edit Inventory");

        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10));
        grid.setHgap(10);
        grid.setVgap(10);

        TextField productIdField = new TextField(String.valueOf(inventory.getProductId()));
        CheckBox reorderNeededCheckbox = new CheckBox();
        reorderNeededCheckbox.setSelected(inventory.getReorderLevel() > 0);

        grid.add(new Label("Product ID:"), 0, 0);
        grid.add(productIdField, 1, 0);
        grid.add(new Label("Reorder Level:"), 0, 1);
        grid.add(reorderNeededCheckbox, 1, 1);

        Button saveButton = new Button("Save");
        saveButton.setOnAction(e -> {
            try {
                inventory.setProductId(Integer.parseInt(productIdField.getText()));
                inventory.setReorderLevel(reorderNeededCheckbox.isSelected() ? 1 : 0);
                updateInventory(inventory);
                inventoryTable.refresh();
                dialog.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });

        Button cancelButton = new Button("Cancel");
        cancelButton.setOnAction(e -> dialog.close());

        VBox dialogLayout = new VBox(20, grid, saveButton, cancelButton);
        dialogLayout.setPadding(new Insets(10));
        dialogLayout.setAlignment(Pos.CENTER);

        Scene scene = new Scene(dialogLayout, 400, 300);
        dialog.setScene(scene);
        dialog.show();
    }

    private void updateInventory(Inventory inventory) {
        String sql = "UPDATE Inventory SET product_id = ?, is_reorder_needed = ? WHERE inventory_id = ?";

        try (Connection connection = DatabaseUtility.getConnection();
             PreparedStatement statement = connection.prepareStatement(sql)) {

            statement.setInt(1, inventory.getProductId());
            statement.setInt(2, inventory.getReorderLevel());
            statement.setInt(3, inventory.getInventoryId());

            statement.executeUpdate();

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public Parent getRoot() {
        return root;
    }
}
