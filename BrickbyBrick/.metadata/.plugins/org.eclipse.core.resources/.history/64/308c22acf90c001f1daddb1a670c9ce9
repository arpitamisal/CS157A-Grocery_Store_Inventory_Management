package Pages;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.*;
import java.time.LocalDate;

public class SearchAsset {
    private final VBox searchAssetInputs;
    private final HBox buttons3;
    private final Stage primaryStage = new Stage();
    private final ListView<String> searchResultsListView;

    public SearchAsset() {
        searchAssetInputs = new VBox(20);
        searchAssetInputs.setStyle("-fx-padding: 10px; -fx-background-color: cornflowerblue;");

        buttons3 = new HBox(20);
        buttons3.setAlignment(Pos.CENTER);

        Label searchAssetLbl = new Label("Search Asset(s)");
        searchAssetLbl.setStyle("-fx-font-size: 24px;");

        Label assetStringLbl = new Label("Enter name of asset");
        assetStringLbl.setStyle("-fx-font-size: 14px;");

        TextField searchField = new TextField();
        searchResultsListView = new ListView<>();
        searchResultsListView.setPrefSize(400, 300);

        Button homePageButton = new Button("Return to Homepage");
        homePageButton.setOnAction(e -> {
            Stage stage = (Stage) homePageButton.getScene().getWindow();
            HomeScreen homeScreen = new HomeScreen(stage);
            stage.setScene(new Scene(homeScreen.getRoot(), 600, 600));
            stage.setTitle("Home Page");
        });

        Button searchAssetButton = new Button("Search");
        searchAssetButton.setOnAction(e -> {
            String searchSubstring = searchField.getText().trim();
            performSearch(searchSubstring);
        });

        buttons3.getChildren().addAll(homePageButton, searchAssetButton);
        searchAssetInputs.getChildren().addAll(searchAssetLbl, assetStringLbl, searchField, searchResultsListView, buttons3);

        // Set the cell factory to include Edit and Delete buttons
        searchResultsListView.setCellFactory(param -> new AssetListCell());
    }

    private void performSearch(String searchSubstring) {
        ObservableList<String> matchingAssets = FXCollections.observableArrayList();

        try (BufferedReader reader = new BufferedReader(new FileReader("asset_data.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                String assetName = parts[0];
                if (assetName.contains(searchSubstring)) {
                    matchingAssets.add(line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        searchResultsListView.setItems(matchingAssets);
    }

    private void editAsset(String asset) {
        if (asset == null || asset.isEmpty()) {
            System.out.println("No asset selected for editing.");
            return;
        }

        String[] parts = asset.split(",");
        Stage editStage = new Stage();
        VBox editLayout = new VBox(10);
        editLayout.setAlignment(Pos.CENTER);
        editLayout.setStyle("-fx-background-color: cornflowerblue;");

        TextField assetNameField = new TextField(parts[0]);
        ComboBox<String> assetCategoryComboBox = new ComboBox<>(readFromFile("category_data.txt"));
        ComboBox<String> assetLocationComboBox = new ComboBox<>(readFromFile("location_data.txt"));
        DatePicker purchaseDatePicker = new DatePicker(LocalDate.parse(parts[3]));
        TextArea assetDescriptionField = new TextArea(parts[4]);
        TextField assetPurchaseValueField = new TextField(parts[5]);
        DatePicker warrantyDatePicker = new DatePicker(LocalDate.parse(parts[6]));

        assetCategoryComboBox.setValue(parts[1]);
        assetLocationComboBox.setValue(parts[2]);

        editLayout.getChildren().addAll(
            new HBox(new Label("Asset Name: "), assetNameField),
            new HBox(new Label("Asset Category: "), assetCategoryComboBox),
            new HBox(new Label("Asset Location: "), assetLocationComboBox),
            new HBox(new Label("Purchase Date: "), purchaseDatePicker),
            new HBox(new Label("Asset Description: "), assetDescriptionField),
            new HBox(new Label("Purchase Value: "), assetPurchaseValueField),
            new HBox(new Label("Warranty Date: "), warrantyDatePicker),
            new Button("Save", e -> {
                String editedAsset = String.join(",", 
                    assetNameField.getText(),
                    assetCategoryComboBox.getValue(),
                    assetLocationComboBox.getValue(),
                    purchaseDatePicker.getValue() == null ? "" : purchaseDatePicker.getValue().toString(),
                    assetDescriptionField.getText(),
                    assetPurchaseValueField.getText(),
                    warrantyDatePicker.getValue() == null ? "" : warrantyDatePicker.getValue().toString()
                );

                int selectedIndex = searchResultsListView.getSelectionModel().getSelectedIndex();
                searchResultsListView.getItems().set(selectedIndex, editedAsset);
                updateAsset(asset, editedAsset);
                editStage.close();
                performSearch(""); // Refresh or adjust as needed
            })
        );

        Scene editScene = new Scene(editLayout, 600, 600);
        editStage.setScene(editScene);
        editStage.initModality(Modality.APPLICATION_MODAL);
        editStage.showAndWait();
    }

    private ObservableList<String> readFromFile(String filename) {
        ObservableList<String> items = FXCollections.observableArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                items.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return items;
    }

    private void updateAsset(String oldAsset, String newAsset) {
        try {
            File inputFile = new File("asset_data.csv");
            File tempFile = new File("temp.csv");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (currentLine.equals(oldAsset)) {
                    writer.write(newAsset + System.getProperty("line.separator"));
                } else {
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            }
            writer.close();
            reader.close();
            inputFile.delete();
            tempFile.renameTo(inputFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public Parent getRoot() {
        return searchAssetInputs;
    }

    private class AssetListCell extends ListCell<String> {
        private final Button deleteButton = new Button("Delete");
        private final Button editButton = new Button("Edit");

        public AssetListCell() {
            deleteButton.setOnAction(event -> {
                String asset = getItem();
                getListView().getItems().remove(asset);
                updateAsset(asset, "");
            });

            editButton.setOnAction(event -> {
                String asset = getItem();
                editAsset(asset);
            });

            HBox buttons = new HBox(10, editButton, deleteButton);
            setGraphic(buttons);
        }

        @Override
        protected void updateItem(String item, boolean empty) {
            super.updateItem(item, empty);
            setText(item);
            setGraphic(empty ? null : new HBox(10, editButton, deleteButton));
        }
    }
}
