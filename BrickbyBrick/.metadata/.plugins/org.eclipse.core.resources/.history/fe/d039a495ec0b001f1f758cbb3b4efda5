package Pages;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.*;
import java.time.LocalDate;

public class SearchByLocation {
    private final VBox root;
    private final HBox buttons;
    private final ListView<String> resultsListView;
    private final ComboBox<String> assetLocationDropdown;

    public SearchByLocation() {
        root = new VBox(20);
        root.setStyle("-fx-padding: 10px; -fx-background-color: cornflowerblue;");

        buttons = new HBox(20);
        buttons.setAlignment(Pos.CENTER);

        Label locationMainLbl = new Label("Search Asset(s) by Location");
        locationMainLbl.setStyle("-fx-font-size: 24px;");

        Label assetLocationDropLbl = new Label("Select Asset Location:");
        assetLocationDropdown = new ComboBox<>();
        resultsListView = new ListView<>();
        resultsListView.setPrefSize(400, 300);

        ObservableList<String> locations = readLocationsFromFile("location_data.txt");
        assetLocationDropdown.setItems(locations);

        Button homeButton = new Button("Return to Homepage");
        Button searchButton = new Button("Search");

        homeButton.setOnAction(e -> {
            Stage primaryStage = (Stage) homeButton.getScene().getWindow();
            primaryStage.setScene(new Scene(new HomeScreen(primaryStage).getRoot(), 800, 800));
            primaryStage.setTitle("Home Page");
        });

        searchButton.setOnAction(e -> {
            String selectedLocation = assetLocationDropdown.getValue();
            performSearch(selectedLocation);
        });

        buttons.getChildren().addAll(homeButton, searchButton);
        root.getChildren().addAll(locationMainLbl, assetLocationDropLbl, assetLocationDropdown, resultsListView, buttons);

        resultsListView.setCellFactory(lv -> new ListCell<String>() {
            private final HBox content = new HBox(10);
            private final Label itemLabel = new Label();
            private final Button editButton = new Button("Edit");
            private final Button deleteButton = new Button("Delete");

            {
                content.setAlignment(Pos.CENTER_LEFT);
                content.getChildren().addAll(itemLabel, editButton, deleteButton);
                editButton.setOnAction(event -> editAsset(getItem()));
                deleteButton.setOnAction(event -> {
                    ObservableList<String> items = resultsListView.getItems();
                    String item = getItem();
                    items.remove(item);
                    deleteAsset(item, "asset_data.csv");
                    performSearch(assetLocationDropdown.getValue());
                });
            }

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                } else {
                    itemLabel.setText(item);
                    setGraphic(content);
                }
            }
        });
    }

    private ObservableList<String> readLocationsFromFile(String filename) {
        ObservableList<String> items = FXCollections.observableArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                items.add(line.trim());
            }
        } catch (IOException e) {
            System.err.println("Failed to read locations from file: " + e.getMessage());
        }
        return items;
    }

    private ObservableList<String> searchByLocation(String filename, String location) {
        ObservableList<String> filteredAssets = FXCollections.observableArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 2 && parts[2].trim().equals(location.trim())) {
                    filteredAssets.add(line);
                }
            }
        } catch (IOException e) {
            System.err.println("Failed to search assets: " + e.getMessage());
        }
        return filteredAssets;
    }

    private void performSearch(String location) {
        resultsListView.setItems(searchByLocation("asset_data.csv", location));
    }

    private void deleteAsset(String asset, String filename) {
        File inputFile = new File(filename);
        File tempFile = new File("temp_" + filename);

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (!currentLine.trim().equals(asset.trim())) {
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
            System.out.println("Error updating the file after deleting an asset.");
        }
    }

    private void editAsset(String asset) {
        // Extract asset details
        String[] parts = asset.split(",");

        // Create and configure the edit dialog
        Stage editStage = new Stage();
        VBox editLayout = new VBox(10);
        editLayout.setAlignment(Pos.CENTER);
        TextField[] fields = new TextField[parts.length];
        for (int i = 0; i < parts.length; i++) {
            fields[i] = new TextField(parts[i]);
            editLayout.getChildren().add(new HBox(new Label("Field " + (i + 1) + ":"), fields[i]));
        }

        Button saveButton = new Button("Save");
        saveButton.setOnAction(e -> {
            StringBuilder sb = new StringBuilder();
            for (TextField field : fields) {
                if (sb.length() > 0) sb.append(",");
                sb.append(field.getText());
            }

            updateAsset(asset, sb.toString());
            performSearch(assetLocationDropdown.getValue());
            editStage.close();
        });

        editLayout.getChildren().add(saveButton);

        Scene editScene = new Scene(editLayout, 750, 750);
        editStage.setScene(editScene);
        editStage.initModality(Modality.APPLICATION_MODAL);
        editStage.showAndWait();
    }

    private void updateAsset(String oldAsset, String newAsset) {
        File inputFile = new File("asset_data.csv");
        File tempFile = new File("temp_asset_data.csv");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (currentLine.equals(oldAsset)) {
                    writer.write(newAsset + System.getProperty("line.separator"));
                } else {
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
            System.out.println("Error updating the file after modifying an asset.");
        }
    }

    public Parent getRoot() {
        return root;
    }
}
