package Pages;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.*;
import java.time.LocalDate;

public class SearchByLocation {
    private final VBox root;
    private final HBox buttons;
    private final ListView<String> resultsListView;
    private final ComboBox<String> assetLocationDropdown;

    public SearchByLocation() {
        root = new VBox(20);
        root.setStyle("-fx-padding: 10px; -fx-background-color: cornflowerblue;");

        buttons = new HBox(20);
        buttons.setAlignment(Pos.CENTER);

        Label locationMainLbl = new Label("Search Asset(s) by Location");
        locationMainLbl.setStyle("-fx-font-size: 24px;");

        Label assetLocationDropLbl = new Label("Select Asset Location:");
        assetLocationDropdown = new ComboBox<>();
        resultsListView = new ListView<>();
        resultsListView.setPrefSize(400, 300);

        ObservableList<String> locations = readLocationsFromFile("location_data.txt");
        assetLocationDropdown.setItems(locations);

        Button homeButton = new Button("Return to Homepage");
        Button searchButton = new Button("Search");

        homeButton.setOnAction(e -> {
            Stage primaryStage = (Stage) homeButton.getScene().getWindow();
            primaryStage.setScene(new Scene(new HomeScreen(primaryStage).getRoot(), 800, 800));
            primaryStage.setTitle("Home Page");
        });

        searchButton.setOnAction(e -> {
            String selectedLocation = assetLocationDropdown.getValue();
            performSearch(selectedLocation);
        });

        buttons.getChildren().addAll(homeButton, searchButton);
        root.getChildren().addAll(locationMainLbl, assetLocationDropLbl, assetLocationDropdown, resultsListView, buttons);

        resultsListView.setCellFactory(lv -> new ListCell<String>() {
            private final HBox content = new HBox(10);
            private final Label itemLabel = new Label();
            private final Button editButton = new Button("Edit");
            private final Button deleteButton = new Button("Delete");

            {
                content.setAlignment(Pos.CENTER_LEFT);
                content.getChildren().addAll(itemLabel, editButton, deleteButton);
                editButton.setOnAction(event -> editAsset(getItem()));
                deleteButton.setOnAction(event -> {
                    ObservableList<String> items = resultsListView.getItems();
                    String item = getItem();
                    items.remove(item);
                    deleteAsset(item, "asset_data.csv");
                    performSearch(assetLocationDropdown.getValue());
                });
            }

            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setGraphic(null);
                } else {
                    itemLabel.setText(item);
                    setGraphic(content);
                }
            }
        });
    }

    private ObservableList<String> readLocationsFromFile(String filename) {
        ObservableList<String> items = FXCollections.observableArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                items.add(line.trim());
            }
        } catch (IOException e) {
            System.err.println("Failed to read locations from file: " + e.getMessage());
        }
        return items;
    }

    private ObservableList<String> searchByLocation(String filename, String location) {
        ObservableList<String> filteredAssets = FXCollections.observableArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 2 && parts[2].trim().equals(location.trim())) {
                    filteredAssets.add(line);
                }
            }
        } catch (IOException e) {
            System.err.println("Failed to search assets: " + e.getMessage());
        }
        return filteredAssets;
    }

    private void performSearch(String location) {
        resultsListView.setItems(searchByLocation("asset_data.csv", location));
    }

    private void deleteAsset(String asset, String filename) {
        File inputFile = new File(filename);
        File tempFile = new File("temp_" + filename);

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (!currentLine.trim().equals(asset.trim())) {
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
            System.out.println("Error updating the file after deleting an asset.");
        }
    }

    private void editAsset(String asset) {
        // Extract asset details
        String[] parts = asset.split(",");

        // Create and configure the edit dialog
        Stage editStage = new Stage();
        VBox editLayout = new VBox(10);
        editLayout.setAlignment(Pos.CENTER);
        editLayout.setStyle("-fx-background-color: cornflowerblue;");  // Set the background color to cornflower blue

        // Create fields for each part of the asset
        TextField assetNameField = new TextField(parts.length > 0 ? parts[0] : "");
        TextField assetCategoryField = new TextField(parts.length > 1 ? parts[1] : "");
        TextField assetLocationField = new TextField(parts.length > 2 ? parts[2] : "");
        DatePicker purchaseDatePicker = new DatePicker(parts.length > 3 ? LocalDate.parse(parts[3]) : null);
        TextField assetDescriptionField = new TextField(parts.length > 4 ? parts[4] : "");
        TextField assetPurchaseValueField = new TextField(parts.length > 5 ? parts[5] : "");
        DatePicker warrantyDatePicker = new DatePicker(parts.length > 6 ? LocalDate.parse(parts[6]) : null);

        // Adding fields to the layout
        editLayout.getChildren().addAll(
            new HBox(new Label("Asset Name:"), assetNameField),
            new HBox(new Label("Asset Category:"), assetCategoryField),
            new HBox(new Label("Asset Location:"), assetLocationField),
            new HBox(new Label("Purchase Date:"), purchaseDatePicker),
            new HBox(new Label("Asset Description:"), assetDescriptionField),
            new HBox(new Label("Purchase Value:"), assetPurchaseValueField),
            new HBox(new Label("Warranty Date:"), warrantyDatePicker)
        );

        Button saveButton = new Button("Save");
        saveButton.setOnAction(e -> {
            // Create edited asset string from field values
            String editedAsset = String.join(",", 
                assetNameField.getText(),
                assetCategoryField.getText(),
                assetLocationField.getText(),
                purchaseDatePicker.getValue() == null ? "" : purchaseDatePicker.getValue().toString(), // Check for null
                assetDescriptionField.getText(),
                assetPurchaseValueField.getText(),
                warrantyDatePicker.getValue() == null ? "" : warrantyDatePicker.getValue().toString() // Check for null
            );

            // Update the asset in the file and ListView
            updateAsset(asset, editedAsset);
            performSearch(assetLocationDropdown.getValue()); // Refresh the list based on current location
            editStage.close();
        });

        editLayout.getChildren().add(saveButton);

        Scene editScene = new Scene(editLayout, 500, 500);
        editStage.setScene(editScene);
        editStage.initModality(Modality.APPLICATION_MODAL);
        editStage.showAndWait();
    }


    private void updateAsset(String oldAsset, String newAsset) {
        File inputFile = new File("asset_data.csv");
        File tempFile = new File("temp_asset_data.csv");

        try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String currentLine;
            while ((currentLine = reader.readLine()) != null) {
                if (currentLine.equals(oldAsset)) {
                    writer.write(newAsset + System.getProperty("line.separator"));
                } else {
                    writer.write(currentLine + System.getProperty("line.separator"));
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        if (!inputFile.delete() || !tempFile.renameTo(inputFile)) {
            System.out.println("Error updating the file after modifying an asset.");
        }
    }

    public Parent getRoot() {
        return root;
    }
}
