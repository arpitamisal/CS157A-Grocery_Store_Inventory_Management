package Pages; 

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class SearchByLocation {
    private final VBox root;
    private final HBox buttons;
    private final Stage primaryStage = new Stage();
    private ComboBox<String> assetLocationDropdown;
    private ObservableList<String> locations;

    public SearchByLocation() {
        root = new VBox(20);
        root.setStyle("-fx-padding: 10px;");
        
        buttons = new HBox(20);
        buttons.setAlignment(Pos.CENTER);
        
        root.setStyle("-fx-background-color: cornflowerblue;"); // changes the color of the background 

        Label locationMainLbl = new Label ("Search Asset(s) by Location");
        locationMainLbl.setStyle("-fx-font-size: 24px;"); // Change the font size of mainLbl

        Label assetLocationDropLbl = new Label("Select Asset Location from dropdown menu");
        assetLocationDropdown = new ComboBox<>();
        locations = readFromFile("location_data.txt");
        assetLocationDropdown.setItems(locations);

        Button homeButton = new Button("Return to Homepage");
        Button searchButton = new Button("Search");
        buttons.getChildren().addAll(homeButton, searchButton);
        
        root.getChildren().addAll(locationMainLbl, assetLocationDropLbl, assetLocationDropdown, buttons);

        homeButton.setOnAction(e -> {
            System.out.println("Back to the Homepage"); // test to prove functionality
            Stage primaryStage = (Stage) homeButton.getScene().getWindow();
            HomeScreen homeScreen = new HomeScreen(primaryStage);
            primaryStage.setScene(new Scene(homeScreen.getRoot(), 800, 800));
            primaryStage.setTitle("Home Page");
        });

        searchButton.setOnAction(e -> {
            String selectedLocation = assetLocationDropdown.getValue();
            if (selectedLocation != null && !selectedLocation.isEmpty()) {
                performSearch(selectedLocation);
            } else {
                // Handle case when no location is selected
                System.out.println("Please select a location.");
                // You might want to display an error message to the user.
            }
        });
    }

    public Parent getRoot() {
        return root;
    }

    private ObservableList<String> readFromFile(String filename) {
        ObservableList<String> items = FXCollections.observableArrayList();
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                items.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return items;
    }

    private void performSearch(String selectedLocation) {
        ObservableList<String> matchingAssets = FXCollections.observableArrayList();

        try (BufferedReader reader = new BufferedReader(new FileReader("asset_data.csv"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                // Assuming the location is the second column, change index accordingly if not
                String assetLocation = parts[1].trim();
                // Check if asset location matches the selected location
                if (assetLocation.equalsIgnoreCase(selectedLocation)) {
                    matchingAssets.add(line); // Add entire line (asset information) to matching assets
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Display search results in ListView
        // Add edit button to each item
        displaySearchResults(matchingAssets);
    }

    private void displaySearchResults(ObservableList<String> matchingAssets) {
        VBox searchResultsBox = new VBox();
        searchResultsBox.setStyle("-fx-padding: 10px;");
        
        Label resultsLabel = new Label("Search Results:");
        resultsLabel.setStyle("-fx-font-size: 18px; -fx-font-weight: bold;");
        
        ListView<String> searchResultsListView = new ListView<>();
        searchResultsListView.setItems(matchingAssets);
        searchResultsListView.setPrefHeight(200); // Set preferred height as per your requirement
        Button homeButton2 = new Button("Return to Homepage");
        
        homeButton2.setOnAction(e -> {
        	SearchByLocation searchByLocationAsset = new SearchByLocation();
			primaryStage.setScene(new Scene(searchByLocationAsset.getRoot(), 800, 800)); // create instance of searchAsset class
			primaryStage.setTitle("Search Asset(s) by Location");
        });
        
        searchResultsBox.getChildren().addAll(resultsLabel, searchResultsListView, homeButton2);
        
        // Replace the existing UI with the search results UI
        root.getChildren().setAll(searchResultsBox);
    }
}
